# Sistema ENEDES - PHP/Apache

Sistema completo de gestão de projetos ENEDES desenvolvido em PHP com Apache, compatível com Render.com e PostgreSQL.

## 🚀 Funcionalidades Principais

- **Dashboard Executivo**: Visão geral com métricas, estatísticas e gráficos interativos
- **Gestão de Metas**: Cadastro e acompanhamento de metas estratégicas com indicadores
- **Cronograma Financeiro**: Controle de etapas, prazos e execução orçamentária
- **Programas**: Gestão completa de 8 programas com ações e inventário
- **Follow-ups Inteligentes**: Sistema de acompanhamento com tarefas e colaboradores
- **Sistema de Tarefas**: Criação, gerenciamento e anexos de arquivos
- **Inventário de Equipamentos**: Controle de recursos por programa com valores
- **Controle de Acesso**: Perfis diferenciados (Coordenador Geral e Coordenadores de Programa)
- **Sistema Híbrido**: Funciona online (backend) e offline (localStorage) automaticamente
- **Farol de Acompanhamento**: Indicadores visuais de status por programa

## 🛠️ Tecnologias e Arquitetura

- **Frontend**: HTML5, CSS3, JavaScript ES6+, Tailwind CSS
- **Backend**: PHP 8.1 com Apache
- **Banco de Dados**: PostgreSQL (Render Database)
- **Deploy**: Render.com com Docker (auto-deploy do GitHub)
- **Containerização**: Docker com php:8.1-apache + PostgreSQL extensions
- **Sistema Híbrido**: Backend + LocalStorage fallback automático
- **APIs**: RESTful com CORS configurado
- **Compatibilidade**: Fallbacks para ícones (emoji) e gráficos (CSS) quando scripts externos falham

## 📋 Estrutura Real do Projeto

```
SISTEM/ (Raiz do Projeto)
├── index.html              # Frontend principal (166KB - sistema híbrido)
├── api.php                 # Backend API PHP (26KB - na raiz)
├── Dockerfile              # Configuração Docker para deploy
├── render.yaml             # Configuração automática do Render
├── .env.example            # Exemplo de variáveis de ambiente
├── .gitignore              # Arquivos ignorados pelo Git
├── README.md               # Documentação do projeto (7KB)
└── ESTRUTURA_PROJETO.txt   # Este arquivo de estrutura
```

### 📁 Detalhes dos Arquivos

| Arquivo | Tamanho | Descrição |
|---------|---------|-----------|
| `index.html` | 166KB | Frontend completo com sistema híbrido online/offline |
| `api.php` | 26KB | Backend API REST com PostgreSQL e CORS |
| `Dockerfile` | 435B | Configuração Docker simples e otimizada |
| `render.yaml` | 330B | Deploy automático com banco PostgreSQL |
| `README.md` | 7KB | Documentação completa do projeto |
| `.env.example` | 381B | Template de variáveis de ambiente |
| `.gitignore` | 505B | Exclusões do controle de versão |

## 📦 Configuração do Docker

### Dockerfile (Real)
```dockerfile
FROM php:8.1-apache
# Instalar extensões PHP necessárias
RUN docker-php-ext-install pdo pdo_pgsql
# Habilitar mod_rewrite do Apache
RUN a2enmod rewrite
# Copiar todos os arquivos para o diretório web do Apache
COPY . /var/www/html/
```

**Características:**
- ✅ **Base**: PHP 8.1 com Apache integrado
- ✅ **PostgreSQL**: Extensões `pdo` e `pdo_pgsql` instaladas
- ✅ **Mod Rewrite**: Habilitado para URLs amigáveis
- ✅ **Cópia Simples**: Todos arquivos copiados para `/var/www/html/`

## 🌐 Deploy no Render - Configuração Real

### render.yaml (Configuração Atual)
```yaml
services:
  - type: web
    name: enedessystem
    env: docker
    plan: free
    dockerfilePath: ./Dockerfile
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: enedes-db
          property: connectionString

databases:
  - name: enedes-db
    databaseName: enedes
    user: enedes_user
    plan: free
```

### 📊 **STATUS ATUAL**
- **URL do Sistema**: `https://enedessystem.onrender.com`
- **Serviço**: `enedessystem` (nome real do render.yaml)
- **Banco**: PostgreSQL automático do Render (não Neon)
- **Database**: `enedes-db` com usuário `enedes_user`
- **Environment**: `DATABASE_URL` configurada automaticamente

### ✅ **Vantagens da Configuração Atual**
1. **Deploy Automático**: Render gerencia banco automaticamente
2. **Zero Configuração**: DATABASE_URL gerada automaticamente
3. **Backup Incluído**: Render faz backup do PostgreSQL
4. **SSL Automático**: HTTPS configurado automaticamente
5. **Monitoramento**: Logs e métricas integrados

## 📱 API Endpoints - Estrutura Real

**Base URL**: `https://enedessystem.onrender.com/api.php`

### 🔧 Sistema e Teste
- `GET /api.php?endpoint=test` - Teste completo da API e conexão
- `GET /api.php?endpoint=health` - Status de saúde do sistema

### 🎯 Metas/Goals
- `GET /api.php?endpoint=goals` - Listar todas as metas
- `POST /api.php?endpoint=goals` - Criar nova meta
- `PUT /api.php?endpoint=goals&id={id}` - Atualizar meta específica
- `DELETE /api.php?endpoint=goals&id={id}` - Excluir meta

### ⚡ Ações
- `GET /api.php?endpoint=actions` - Listar todas as ações
- `GET /api.php?endpoint=actions&goal_id={id}` - Ações de uma meta específica
- `POST /api.php?endpoint=actions` - Criar nova ação
- `PUT /api.php?endpoint=actions&id={id}` - Atualizar ação
- `DELETE /api.php?endpoint=actions&id={id}` - Excluir ação

### 📅 Sistema de Follow-ups (Híbrido)
- **Online**: API + PostgreSQL
- **Offline**: LocalStorage automático
- **Sincronização**: Detecção automática de conectividade

### 📊 Formato de Resposta
```json
{
  "status": "success",
  "data": [...],
  "timestamp": "2025-07-19 13:05:08",
  "database_connected": true,
  "config_method": "Render Database (Auto)"
}
```

## 🔧 Desenvolvimento Local

### Usando Docker (Configuração Real)

```bash
# Clone o repositório
git clone https://github.com/EnedesIF/SISTEM
cd SISTEM

# Build usando o Dockerfile real
docker build -t enedes-system .

# Execute localmente (sem banco para desenvolvimento)
docker run -p 8080:80 enedes-system

# Execute com banco PostgreSQL local (opcional)
docker run -p 8080:80 \
  -e DATABASE_URL="postgresql://user:pass@localhost:5432/enedes" \
  enedes-system

# Acesse o sistema
# Frontend: http://localhost:8080
# API Test: http://localhost:8080/api.php?endpoint=test
```

### Desenvolvimento Offline

O sistema funciona **100% offline** por padrão:
- Todos os dados salvos em `localStorage`
- Gráficos e ícones com fallbacks
- Zero dependências externas obrigatórias

## 🚀 URLs de Teste - Configuração Real

### 🌐 Sistema Principal
- **Frontend**: `https://enedessystem.onrender.com/`
- **Login**: Qualquer usuário com senha `123456`

### 🔧 Testes de API
- **Teste Completo**: `https://enedessystem.onrender.com/api.php?endpoint=test`
- **Metas Backend**: `https://enedessystem.onrender.com/api.php?endpoint=goals`
- **Ações Backend**: `https://enedessystem.onrender.com/api.php?endpoint=actions`

### ✅ Resposta de Sucesso Esperada
```json
{
  "status": "success",
  "message": "ENEDES API funcionando perfeitamente!",
  "timestamp": "2025-07-19 13:05:08",
  "method": "GET",
  "php_version": "8.1.33",
  "database_connected": true,
  "config_method": "Render Database (Auto)",
  "environment": "Production"
}
```

## 👥 Usuários Padrão do Sistema

| Usuário | Senha | Perfil | Programa |
|---------|-------|--------|----------|
| Coordenação Geral | 123456 | Coordenador Geral | Todos |
| IFB Mais Empreendedor | 123456 | Coordenador de Programa | IFB Mais Empreendedor |
| Rota Empreendedora | 123456 | Coordenador de Programa | Rota Empreendedora |
| Lab Varejo | 123456 | Coordenador de Programa | Lab Varejo |
| Lab Consumer | 123456 | Coordenador de Programa | Lab Consumer |
| Estúdio | 123456 | Coordenador de Programa | Estúdio |
| IFB Digital | 123456 | Coordenador de Programa | IFB Digital |
| Sala Interativa | 123456 | Coordenador de Programa | Sala Interativa |
| Agência de Marketing | 123456 | Coordenador de Programa | Agência de Marketing |

## 🐛 Solução de Problemas Específicos

### ❌ Sistema não Carrega
**Verificações**:
1. URL correta: `https://enedessystem.onrender.com/`
2. Render service está ativo?
3. Docker build foi bem-sucedido?

### ❌ API Retorna 404
**Causas**:
- Arquivo `api.php` não está na raiz
- Apache não configurado corretamente

**Solução**:
```bash
# Verificar estrutura
ls -la /var/www/html/
# Deve mostrar: api.php, index.html, etc.
```

### ❌ Banco de Dados não Conecta
**Verificações**:
1. DATABASE_URL está sendo injetada pelo Render?
2. PostgreSQL database `enedes-db` está ativo?
3. Render plan free ainda tem recursos?

**Teste Manual**:
```bash
# Verificar environment variables no container
env | grep DATABASE_URL
```

### ❌ Deploy Falha
**Causas Comuns**:
- Dockerfile com erro de sintaxe
- Arquivos muito grandes (> 100MB)
- Render plan limits excedidos

**Solução**:
1. Check Render logs no dashboard
2. Verificar `.gitignore` está correto
3. Reduzir tamanho dos arquivos se necessário

## 📈 Status Atual e Roadmap (19/07/2025)

### ✅ **Configuração Real Funcionando**
- ✅ **Estrutura Correta**: Arquivos na raiz como definido
- ✅ **Render YAML**: Deploy automático configurado
- ✅ **PostgreSQL**: Banco gerenciado pelo Render
- ✅ **Docker**: Build simples e eficiente
- ✅ **Frontend**: 166KB de código híbrido
- ✅ **Backend**: 26KB de API PHP completa

### ⚙️ **Comandos de Deploy Manual**
```bash
# Se precisar redescarregar
git add .
git commit -m "Deploy atualização"
git push origin main

# Render fará deploy automático
# Ou usar deploy manual no dashboard
```

### 📊 **Arquitetura Final**
```
GitHub (main) → Render (auto-build) → Docker → Apache + PHP 8.1 → PostgreSQL
     ↓              ↓                    ↓           ↓              ↓
 Desenvolver → Push automatico → Container → index.html + api.php → Dados
```

### 🎯 **Sistema 100% Operacional**
- **URL**: `https://enedessystem.onrender.com/`
- **Status**: ✅ **FUNCIONANDO**
- **Backup**: Sistema híbrido com localStorage
- **Monitoramento**: Logs do Render disponíveis

---

**Sistema ENEDES PHP** - Gestão Completa de Projetos v2.0  
**Estrutura Real Documentada**: 19/07/2025  
**Status**: ✅ **OPERACIONAL** ✅
